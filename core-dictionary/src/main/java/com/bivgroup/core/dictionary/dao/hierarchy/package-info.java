/**
 * Пакет обработка иерархической структуры
 *
 *<h1>Алгоритм обрабтки иерархической структуры</h1>
 *<p>Входные параметры: название сущности, соответствует названию с описании метамодели БД сущности в виде Map или List</p>
 *<ul>
 *<li>1.Начало</li>
 *<li>2.Cоздание линейного графа атомарных сущностей, граф представляет собой объект содержащий название сущности, действие над сущностью ('Сохранить', 'Удалить', 'Обновить', 'Не изменять'), саму сцщность в виде Map, родительскую сущность, действия над родительскими сущностями, сущность для восстановления:
 *<ul>
 *<li>2.1 нициализация графа как пустой список</li>
 *<li>2.2 если объект сущности  Map -  обработка:
 *<ul>
 *<li>2.2.1 определить название сущности:
 *<ul>
 *<li>2.2.1.1 если определена родительская сущность и поле наименования текущей сущности название сущности определяется либо  полем "$type$" в сущности или из метаданных БД по связи родительской сущности и поля ссылки на текущую сущность</li>
 *<li>2.2.1.3 иначе это поле наименования текущей сущности</li>
 *</ul>
 *</li>
 *<li>2.2.2 записать в поле  "$type$" текущей сущности ее название</li>
 *<li>2.2.3 определим поле первичного ключа текущей сущности из метаданных БД</li>
 *<li>2.2.4 создать  эемента графа: действие над сущностью , сцщность в виде Map, родительская сущность, действия над родительскими сущностями (как список действий)</li>
 *<li>2.2.5 проеобразуем  текущую сущность:
 *<ul>
 *<li>2.2.5.1 приведем поля сущности к типа описания метаданных БД:
 *<ul>
 *<li>2.2.5.1.1 получим из метаданных БД поля текущей сущности</li>
 *<li>2.2.5.1.2 переложим данные Map в формате название поля:тип</li>
 *<li>2.2.5.1.3 Начало цикла - для каждого поля текущей сущности :
 *<ul>
 *<li>2.2.5.1.3.1 если тип значения String, Long, Integer, Float то переписываем поле типом из данных полученных в пункте 2.2.5.1.2</li>
 *</ul>
 *</li>
 *<li>2.2.5.1.4 Конец цикла </li>
 *</ul>
 *</li>
 *<li>2.2.5.2 получим справочники из полей сущности:
 *<ul>
 *<li>2.2.5.2.1 получим из метаданных БД аттрибуты текущей сущности</li>
 *<li>2.2.5.2.2 Начало цикла - для каждого аттрибута проверим является ли он справочником </li>
 *<li>2.2.5.2.3 если аттрибут это Map (с постфиксом "_EN") - сущность и в текущей сущности есть аттрибут с таким же наименование , но - "_EN", то это справочник</li>
 *<li>2.2.5.2.4 справочники перекладываются в Map (поле названия идентификатор, поле названия сущности)</li>
 *<li>2.2.5.2.5 Конец цикла</li>
 *</ul>
 *</li>
 *<li>2.2.5.3 для сущностей (полей)  справочников развернуть их содержание (найти по идентификатору):
 *<ul>
 *<li>2.2.5.3.1 Начало цикла - для всех справочников текущей сущности , определенных в пункте 2.2.5.2.4</li>
 *<li>2.2.5.3.2 Определим название сущности ссылки</li>
 *<li>2.2.5.3.3 получим из текущей сущности идентификатор ссылки</li>
 *<li>2.2.5.3.4 если значение идентификатора в текущей сущности пустое , то продолжим цикл 2.2.5.3.1</li>
 *<li>2.2.5.3.5 если значение ссылки  в текущей сущности не пустое , то продолжим цикл 2.2.5.3.1 (приоритет имее разврнутое значение ссылки)</li>
 *<li>2.2.5.3.6 по значению идентификатора ссылки (2.2.5.3.3) получим его содержание из БД</li>
 *<li>2.2.5.3.7 для ссылки полученной в 2.2.5.3.6 проставим действие 'Не изменять'</li>
 *<li>2.2.5.3.8 положим ссылку полученную в 2.2.5.3.6 в текущую сущность </li>
 *<li>2.2.5.3.9 Конец цикла </li>
 *</ul>
 *</li>
 *</ul>
 *</li>
 *<li>2.2.6 Если граф содержит элемент созданный в  2.2.2 то завершить обработку объекта функция определения равенства сущностей:
 *<ul>
 *<li>2.2.6.1 если ссылки равны то это тот же объект</li>
 *<li>2.2.6.2 если название сущности и занчение поля идентификатор равны  то это тот же объект </li>
 *</ul>
 *</li>
 *<li>2.2.7 добавить элемент созданный в  2.2.2 в граф  созданный в 2.1 </li>
 *<li>2.2.8 Начало цикла - обработка всех полей текущую  Map</li>
 *<li>2.2.9 если тип поля текущей сущности Map (M2O) то повторить 2.2</li>
 *<li>2.2.10 если тип поля текущей сущности List (O2M):
 *<ul>
 *<li>2.2.10.1 получить из метамодели БД название сущности</li>
 *<li>2.2.10.2 Начало цикла - обработка списка , входные : название поля списка, название сущности входящей в список</li>
 *<li>2.2.10.3 каждый элемент списка обработать как сущность 2.2</li>
 *<li>2.2.10.4 для элемента списка определить ссылку на родительскую сущность (по настройке - 'записать ссылку родительской сущности'):
 *<ul>
 *<li>2.2.10.4.1 если настройка 'записать ссылку родительской сущности' не определена и элемента списка не содержит ее  выбросить исключение</li>
 *<li>2.2.10.4.2 получить из метамодели БД название поля ссылающиеся на родительскую сущность, название поля ищется как в элемента списка , так и в  родительских элементах метамодели данной сущности</li>
 *<li>2.2.10.4.3 положить для данной сущности в поле полученное 2.2.10.4.1 родительскую сущность из объекта графа созданного в 2.2.2</li>
 *</ul>
 *</li>
 *<li>2.2.10.5 Конец цикла</li>
 *</ul>
 *</li>
 *<li>2.2.11 Конец цикла</li>
 *</ul>
 *</li>
 *</ul>
 *</li>
 *<li>3. обработка графа:
 *<ul>
 *<li>3.1 подготовим граф - отсроченное обновление, проверка сущностей:
 *<ul>
 *<li>3.1.1 создать новый выходной граф</li>
 *<li>3.1.2 Начало цикла -  для каждого элемента графа</li>
 *<li>3.1.3 проверка элемента графа:
 *<ul>
 *<li>3.1.3.1 проверить возможность выполенния действия, если действие не входит в список разрешенных родительских действий определенных в 2.2.2 и описанных для каждого действия то выбросить исключение</li>
 *<li>3.1.3.2 проверить существование описания сущности в метамодели БД, если нет выбросить исключение</li>
 *<li>3.1.3.3 проверить наличие поля идентификатора сущности при действиях над сущность 'Удалить', 'Обновить', если нет выбросить исключение</li>
 *</ul>
 *</li>
 *<li>3.1.4 конвертер графа для опрерации отсроченного обновления
 *<ul>
 *<li>3.1.4.1 создать новый выходной граф</li>
 *<li>3.1.4.2 если действие на элементе графа  'Обновить':
 *<ul>
 *<li>3.1.4.2.1 создать новый элемент графа , в сущность для восстановления сохранить текущее состояние сущности элемента графаф</li>
 *<li>3.1.4.2.2 в элемент графа , в сущность сохранить текущее состояние сущности элемента графаф с вычетом полей являющимися ссылками ( условие  тип Map , поле есть в метамодели БД)</li>
 *<li>3.1.4.2.3 в новый выходной граф (3.1.1) добавить элемент 3.1.4.2.1 (в конец графа)
 *</ul>
 *</li>
 *</ul>
 *</li>
 *<li>3.1.5 переписать граф : граф + новый выходной граф (3.1.1)</li>
 *<li>3.1.6 Конец цикла</li>
 *</ul>
 *</li>
 *<li>3.2 выполнить действие по графу
 *<ul>
 *<li>3.2.1 Начало цикла -  для каждого элемента графа</li>
 *<li>3.2.2 восстановить ссылки.  переписать сущность элемента графа из сохраненной сущности для восстановления (3.1.4.2.1)</li>
 *<li>3.2.3 выполнить действие над сущностью на элементе графа:
 *<ul>
 *<li>3.2.3.1 если действие 'Не изменять', при условии наличия идентификатора в сущности, начитать ее из БД</li>
 *<li>3.2.3.2 если действие 'Сохранить' , сохранить сущность в БД (onlySave)</li>
 *<li>3.2.3.3 если действие 'Обновить', обновить сущность в БД (merge)</li>
 *<li>3.2.3.4 если действие 'Удалить', удалить сущность из БД (delete)</li>
 *</ul>
 *</li>
 *<li>3.2.4 Конец цикла</li>
 *</ul>
 *</li>
 *</ul>
 *<li>4.очистка пустых параметров
 *<ul>
 *<li>4.1 Рекурсивно обходим все элементы входной сущности и удаляем аттрибуты с нулевым значением</li>
 *</ul>
 *</li>
 *<li>5.Конец</li>
 *<ul>
 *
 */
package com.bivgroup.core.dictionary.dao.hierarchy;