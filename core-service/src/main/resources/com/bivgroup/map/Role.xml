<?xml version="1.0"?>
<!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~ License: GNU Lesser General Public License (LGPL), version 2.1 or later.
  ~ See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
  -->
<entity-mappings xmlns="http://java.sun.com/xml/ns/persistence/orm"
                 version="2.0">

    <named-native-query name="admRoleUserAdd">
        <query><![CDATA[
        INSERT INTO CORE_ROLEACCOUNT (ROLEACCOUNTID, USERACCOUNTID, ROLEID#chunk($TODATE), TODATE#end)
		VALUES (:ROLEACCOUNTID, :USERACCOUNTID, :ROLEID #chunk($TODATE), #bind($TODATE)#end )
            ]]>
        </query>
    </named-native-query>

    <named-native-query name="admRoleUserCheckExists">
        <query><![CDATA[
        SELECT * FROM CORE_ROLEACCOUNT
        WHERE USERACCOUNTID = :USERACCOUNTID
        AND ROLEID = :ROLEID
        AND (:TODATE IS NULL OR (TODATE = 0 OR TODATE IS NULL OR TODATE > :TODATE))
        ]]>
        </query>
    </named-native-query>

    <named-native-query name="admAccountRoleList">
        <query>
            SELECT ROLEACCOUNT.*,
            USERROLE.ROLESYSNAME,
            USERROLE.ROLENAME,
            USERROLE.DESCRIPTION
            FROM CORE_ROLEACCOUNT ROLEACCOUNT, CORE_USERROLE USERROLE
            WHERE ROLEACCOUNT.ROLEID = USERROLE.ROLEID
            AND (:USERACCOUNTID IS NULL OR (ROLEACCOUNT.USERACCOUNTID=:USERACCOUNTID))
            AND (:TODATE IS NULL OR (ROLEACCOUNT.TODATE = 0 OR ROLEACCOUNT.TODATE IS NULL OR ROLEACCOUNT.TODATE >
            :TODATE))
            #chunk($ORDERBY) ORDER BY $ORDERBY #end
        </query>
    </named-native-query>

    <named-native-query name="admUserRoleByID">
        <query>
            SELECT
            CORE_USERROLE.ROLEID,
            CORE_USERROLE.ROLESYSNAME,
            CORE_USERROLE.ROLENAME,
            CORE_USERROLE.DESCRIPTION,
            CORE_USERROLE.FROMDATE,
            CORE_USERROLE.TODATE
            FROM
            CORE_USERROLE
            WHERE
            CORE_USERROLE.ROLEID= :ROLEID
        </query>
    </named-native-query>

    <named-native-query name="getRolesByAccount">
        <query>
            SELECT CU.ROLESYSNAME
            FROM CORE_USERROLE CU
            LEFT JOIN CORE_ROLEACCOUNT CRA ON CRA.ROLEID = CU.ROLEID AND (:TODATE IS NULL OR (CRA.TODATE = 0 OR
            CRA.TODATE IS NULL OR CRA.TODATE > :TODATE))
            LEFT JOIN CORE_USERACCOUNT UA ON UA.USERACCOUNTID = CRA.USERACCOUNTID
            WHERE
            CU.ROLESYSNAME in ('dca','dsso','dsa', 'tbp', 'dsg')
            AND UA.LOGIN = :LOGIN
        </query>
    </named-native-query>

    <named-native-query name="admRightFilterValueCheckList">
        <query>
            <![CDATA[
            (SELECT F.FILTER AS FILTER, F.OPERATION AS OPERATION, F.VALUE AS VALUE, F.KEY AS "KEY", F.ANYVALUE AS
            ANYVALUE, RA.ACCESSMODE AS ACCESSMODE,
            RA.RIGHTACCOUNTID AS RELATIONID, 'ACCOUNT' AS SOURCETYPE, UA.LOGIN AS SOURCE, 10 AS PRIORITY, 0 AS
            RELATIONSHIP,
            RA.ISEXCEPTION, RA.EXCEPTIONMODE
            FROM CORE_USERACCOUNT UA
            inner join CORE_RIGHTACCOUNT RA on RA.USERACCOUNTID=UA.USERACCOUNTID
            inner join CORE_RIGHT R on RA.RIGHTID=R.RIGHTID
            left outer join (
            SELECT RF.SYSNAME AS FILTER, RF.OPERATION AS OPERATION, RFV.VALUE AS VALUE, RFV.VKEY AS "KEY", RF.ANYVALUE
            AS ANYVALUE, RF.RELATIONID AS RELATIONID
            FROM CORE_RIGHTFILTER RF
            inner join CORE_RFVALUE RFV on RFV.RIGHTFILTERID=RF.RIGHTFILTERID
            WHERE RF.RELATIONTYPE='ACCOUNT')
            F on F.RELATIONID=RA.RIGHTACCOUNTID
            WHERE
            R.RIGHTSYSNAME=:RIGHTSYSNAME AND UA.LOGIN=:LOGIN AND RA.STARTDATE < :CURRENTDATE AND RA.ENDDATE > :CURRENTDATE
            )
            UNION ALL
            (
            SELECT F.FILTER AS FILTER, F.OPERATION AS OPERATION, F.VALUE AS VALUE, F.KEY AS "KEY", F.ANYVALUE AS
            ANYVALUE, RUR.ACCESSMODE AS ACCESSMODE,
            RUR.RIGHTUSERROLEID AS RELATIONID, 'ROLE' AS SOURCETYPE, UR.ROLENAME AS SOURCE, 20 AS PRIORITY, 0 AS
            RELATIONSHIP,
            RUR.ISEXCEPTION, RUR.EXCEPTIONMODE
            FROM
            CORE_USERACCOUNT UA
            INNER JOIN CORE_ROLEACCOUNT RA ON UA.USERACCOUNTID=RA.USERACCOUNTID AND(:TODATE IS NULL OR (RA.TODATE = 0 OR
            RA.TODATE IS NULL OR RA.TODATE > :TODATE))
            INNER JOIN CORE_USERROLE UR ON RA.ROLEID=UR.ROLEID
            INNER JOIN CORE_RIGHTUSERROLE RUR ON UR.ROLEID=RUR.ROLEID
            INNER JOIN CORE_RIGHT R ON R.RIGHTID=RUR.RIGHTID
            LEFT OUTER JOIN (
            SELECT RF.SYSNAME AS FILTER, RF.OPERATION AS OPERATION, RFV.VALUE AS VALUE, RFV.VKEY AS "KEY", RF.ANYVALUE
            AS ANYVALUE, RF.RELATIONID AS RELATIONID
            FROM CORE_RIGHTFILTER RF INNER JOIN CORE_RFVALUE RFV ON RFV.RIGHTFILTERID=RF.RIGHTFILTERID
            WHERE RF.RELATIONTYPE='ROLE'
            ) F ON F.RELATIONID=RUR.RIGHTUSERROLEID
            WHERE
            R.RIGHTSYSNAME=:RIGHTSYSNAME AND UA.LOGIN=:LOGIN AND RUR.STARTDATE < :CURRENTDATE AND RUR.ENDDATE > :CURRENTDATE
            )
            UNION ALL
            (
            SELECT F.FILTER AS FILTER, F.OPERATION AS OPERATION, F.VALUE AS VALUE, F.KEY AS "KEY", F.ANYVALUE AS
            ANYVALUE, RG.ACCESSMODE AS ACCESSMODE,
            RG.RIGHTUSRGROUPID AS RELATIONID, 'USERGROUP' AS SOURCETYPE, UG.GROUPNAME AS SOURCE, 30 AS PRIORITY,
            UIG.RELATIONSHIP AS RELATIONSHIP,
            RG.ISEXCEPTION, RG.EXCEPTIONMODE
            FROM
            CORE_USERACCOUNT UA
            INNER JOIN CORE_USERINGROUP UIG ON UA.USERID=UIG.USERID
            INNER JOIN CORE_USERGROUP UG ON UG.USERGROUPID=UIG.GROUPID
            INNER JOIN CORE_RIGHTUSRGROUP RG ON UIG.GROUPID=RG.USERGROUPID
            INNER JOIN CORE_RIGHT R ON R.RIGHTID=RG.RIGHTID
            LEFT OUTER JOIN (
            SELECT RF.SYSNAME AS FILTER, RF.OPERATION AS OPERATION, RFV.VALUE AS VALUE, RFV.VKEY AS "KEY", RF.ANYVALUE
            AS ANYVALUE, RF.RELATIONID AS RELATIONID
            FROM CORE_RIGHTFILTER RF INNER JOIN CORE_RFVALUE RFV ON RFV.RIGHTFILTERID=RF.RIGHTFILTERID
            WHERE RF.RELATIONTYPE='USERGROUP'
            ) F ON RG.RIGHTUSRGROUPID=F.RELATIONID
            WHERE
            R.RIGHTSYSNAME=:RIGHTSYSNAME AND UA.LOGIN=:LOGIN AND RG.STARTDATE < :CURRENTDATE AND RG.ENDDATE > :CURRENTDATE
            )
            UNION ALL
            (
            SELECT F.FILTER AS FILTER, F.OPERATION AS OPERATION, F.VALUE AS VALUE, F.KEY AS "KEY", F.ANYVALUE AS
            ANYVALUE, RD.ACCESSMODE AS ACCESSMODE,
            RD.RIGHTDEPTID AS RELATIONID, 'DEPARTMENT' AS SOURCETYPE, DD.DEPTSHORTNAME AS SOURCE, 40 AS PRIORITY,
            DP.RELATIONSHIP AS RELATIONSHIP,
            RD.ISEXCEPTION, RD.EXCEPTIONMODE
            FROM
            CORE_USERACCOUNT UA
            INNER JOIN CORE_USER U ON UA.USERID=U.USERID
            INNER JOIN DEP_EMPLOYEE DE ON U.OBJECTID=DE.EMPLOYEEID
            INNER JOIN DEP_DEPPARENT DP ON DE.DEPARTMENTID=DP.DEPARTMENTID
            INNER JOIN CORE_RIGHTDEPT RD ON DP.PARENTDEPARTMENT=RD.DEPARTMENTID
            INNER JOIN DEP_DEPARTMENT DD ON DD.DEPARTMENTID=RD.DEPARTMENTID
            INNER JOIN CORE_RIGHT R ON RD.RIGHTID=R.RIGHTID
            LEFT OUTER JOIN (
            SELECT RF.SYSNAME AS FILTER, RF.OPERATION AS OPERATION, RFV.VALUE AS VALUE, RFV.VKEY AS "KEY", RF.ANYVALUE
            AS ANYVALUE, RF.RELATIONID AS RELATIONID
            FROM CORE_RIGHTFILTER RF INNER JOIN CORE_RFVALUE RFV ON RFV.RIGHTFILTERID=RF.RIGHTFILTERID
            WHERE RF.RELATIONTYPE='DEPARTMENT'
            ) F ON RD.RIGHTDEPTID=F.RELATIONID
            WHERE
            R.RIGHTSYSNAME=:RIGHTSYSNAME AND UA.LOGIN=:LOGIN AND DE.STATUS='ACTIVE' AND RD.STARTDATE < :CURRENTDATE AND RD.ENDDATE > :CURRENTDATE
            )
            UNION ALL
            (
            SELECT F.FILTER AS FILTER, F.OPERATION AS OPERATION, F.VALUE AS VALUE, F.KEY AS "KEY", F.ANYVALUE AS
            ANYVALUE, RD.ACCESSMODE AS ACCESSMODE,
            RD.RIGHTDEPTID AS RELATIONID, 'DEPARTMENT' AS SOURCETYPE, DD.DEPTSHORTNAME AS SOURCE, 35 AS PRIORITY,
            DP.RELATIONSHIP AS RELATIONSHIP,
            RD.ISEXCEPTION, RD.EXCEPTIONMODE
            FROM
            CORE_USERACCOUNT UA
            INNER JOIN CORE_USER U ON UA.USERID=U.USERID
            INNER JOIN DEP_EMPLOYEE DE ON U.OBJECTID=DE.EMPLOYEEID
            INNER JOIN DEP_DEPPARENT DP ON DE.DEPARTMENTID=DP.DEPARTMENTID
            INNER JOIN CORE_RIGHTDEPT RD ON DP.DEPARTMENTID=RD.DEPARTMENTID
            INNER JOIN DEP_DEPARTMENT DD ON DD.DEPARTMENTID=RD.DEPARTMENTID
            INNER JOIN CORE_RIGHT R ON RD.RIGHTID=R.RIGHTID
            LEFT OUTER JOIN (
            SELECT RF.SYSNAME AS FILTER, RF.OPERATION AS OPERATION, RFV.VALUE AS VALUE, RFV.VKEY AS "KEY", RF.ANYVALUE
            AS ANYVALUE, RF.RELATIONID AS RELATIONID
            FROM CORE_RIGHTFILTER RF INNER JOIN CORE_RFVALUE RFV ON RFV.RIGHTFILTERID=RF.RIGHTFILTERID
            WHERE RF.RELATIONTYPE='DEPARTMENT'
            ) F ON RD.RIGHTDEPTID=F.RELATIONID
            WHERE
            R.RIGHTSYSNAME=:RIGHTSYSNAME AND UA.LOGIN=:LOGIN AND DE.STATUS='ACTIVE' AND RD.STARTDATE < :CURRENTDATE AND RD.ENDDATE > :CURRENTDATE
            )
            ORDER BY PRIORITY, RELATIONSHIP, ACCESSMODE, RELATIONID
            ]]>
        </query>
    </named-native-query>

    <named-native-query name="admRoleListByAccount">
        <query>
            SELECT CUR.*
            FROM CORE_USERROLE CUR
            LEFT JOIN CORE_ROLEACCOUNT CUAR ON CUAR.ROLEID = CUR.ROLEID AND (:TODATE IS NULL OR (CUAR.TODATE = 0 OR
            CUAR.TODATE IS NULL OR CUAR.TODATE > :TODATE))
            LEFT JOIN CORE_USERACCOUNT CUA ON CUA.USERACCOUNTID = CUAR.USERACCOUNTID
            WHERE CUA.USERACCOUNTID = :USERACCOUNTID
            ORDER BY CUR.ROLEID
        </query>
    </named-native-query>

    <named-native-query name="admRoleListByAccountCount">
        <query>
            SELECT COUNT(*)
            FROM CORE_USERROLE CUR
            LEFT JOIN CORE_ROLEACCOUNT CUAR ON CUAR.ROLEID = CUR.ROLEID AND (:TODATE IS NULL OR (CUAR.TODATE = 0 OR
            CUAR.TODATE IS NULL OR CUAR.TODATE > :TODATE))
            LEFT JOIN CORE_USERACCOUNT CUA ON CUA.USERACCOUNTID = CUAR.USERACCOUNTID
            WHERE CUA.USERACCOUNTID = :USERACCOUNTID
        </query>
    </named-native-query>

</entity-mappings>